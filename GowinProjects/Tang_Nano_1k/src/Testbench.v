//<time_unit>/<time_precision>
`include "PSRAM_simu.v"
`include "gowin_rpll/grPLL_27_to_84.v"

`timescale 1us/1fs
module Testbench ();

wire clock;
wire clk_PSRAM;
reg startbutton;        //start when button is pressed
reg [3:0] step; 
wire [3:0] mem_sio = 4'b0;
reg enable;
reg clk_enable;         //enable clock

//27MHz
clk_gen clk1(
    .enable(enable),
    .clk(clock)
);

//84Mhz generated by Gowin's PLL
Gowin_rPLL_27_to_84MHz clk2(
    .clkout(clk_PSRAM),
    .clkin(clock)
);

//PSRAM initialization
psram initialize(
    .clk(clock),
    .startbu(startbutton),
    .mem_sio(mem_sio),
    .mem_ce(ce),
    .step(step),
    .mem_clk(clk_PSRAM)
);

parameter real PSRAM_FREQ = 84;
parameter real clk_pd = 1/(PSRAM_FREQ * 1e6) * 1e9;

initial begin
    $display ("PSRAM desired FREQ: %0.3f ns", clk_pd);
    $dumpfile("Testbench.vcd");
    $dumpvars(clk_enable, clock, clk_PSRAM, step);
    #100 enable <= 1;
    #200 startbutton = 1;
    #1e3 enable <= 0;
    #1e3 startbutton = 0;

    $finish; 
end

endmodule
